#!/usr/bin/env node

// This file is part of pa11y.
// 
// pa11y is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// pa11y is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with pa11y.  If not, see <http://www.gnu.org/licenses/>.

'use strict';

var _ = require('underscore');
var OptionError = require('../lib/error/option-error');
var pkg = require('../package.json');
var program = require('commander');
var pa11y = require('../lib/pa11y');
var fs = require('fs');
var path = require('path');

// Configure command-line app
program
	.version(pkg.version)
	.option(
		'-r, --reporter <name>',
		'specify a reporter to use, one of: console (default), csv, json',
		'console'
	)
	.option(
		'-s, --standard <name>',
		'specify a standard to use, one of: Section508, WCAG2A, WCAG2AA (default), WCAG2AAA'
	)
	.option(
		'-c, --htmlcs <url>',
		'specify a URL to source HTML_CodeSniffer from. Default: squizlabs.github.io'
	)
	.option(
		'-C, --config <file>',
		'specify a JSON config file for ignoring rules'
	)
	.option(
		'-t, --timeout <ms>',
		'specify the number of milliseconds before a timeout error occurs. Default: 30000'
	)
	.option(
		'-u, --useragent <ua>',
		'specify a useragent to use when loading your URL. Default: pa11y/<version>'
	)
	.option(
		'-v, --viewport <wxh>',
		'specify the size of the browser viewport. Default: 640x480'
	)
	.option(
		'-p, --port <port>',
		'specify the port to run the PhantomJS server on. Default: 12300'
	)
	.option(
		'-d, --debug',
		'output debug messages'
	)
	.option(
		'--strict',
		'upgrade warnings to errors for exit status'
	)
	.usage('[options] <url>')
	.parse(process.argv);

// Get options
var opts = _.pick(program, [
	'config',
	'debug',
	'htmlcs',
	'port',
	'reporter',
	'standard',
	'strict',
	'timeout',
	'useragent'
]);
opts.url = program.args[0];
if (!opts.url || program.args[1]) {
	program.help();
}

// When applicable, use the local `.pa11yrc` file if it exists
if (!opts.config) {
	var rc = path.join(process.cwd(), '.pa11yrc');
	if (fs.existsSync(rc)) {
		opts.config = rc;
	}
}

// Parse the viewport option
if (program.viewport) {
	var viewport = program.viewport.split('x').map(function (num) {
		return parseInt(num, 10);
	});
	opts.viewport = {
		width: viewport[0],
		height: viewport[1]
	};
}

// Run pa11y
pa11y.sniff(opts, function (err, results) {
	if (err instanceof OptionError) {
		program.outputHelp();
	}
	var exitStatus = err ? -1 :
	opts.strict ? (results.count.warning + results.count.error) :
	results.count.error;
	process.exit(exitStatus);
});
